<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Redis;

class Bookmark extends Model
{
    public $incrementing = false;
    protected $primaryKey = null;
    protected $fillable = [
        'collection_id',
        'bookmarkable_id',
        'bookmarkable_type',
        'user_id'
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($bookmark) {
            if ($bookmark->bookmarkable_type === 'place')
                Redis::sadd(config('cache.prefix').'User:' . $bookmark->user_id . ':PlaceBookmarks', $bookmark->bookmarkable_id);
            else if ($bookmark->bookmarkable_type === 'event')
                Redis::sadd(config('cache.prefix').'User:' . $bookmark->user_id . ':EventBookmarks', $bookmark->bookmarkable_id);
        });

        self::deleting(function ($bookmark) {
            $bookmark->removeFromUserCache();
        });
    }

    public function removeFromUserCache()
    {
        $type = $this->bookmarkable_type;
        if ($type === 'place')
            Redis::sRem(config('cache.prefix').'User:' . $this->user_id . ':PlaceBookmarks', $this->bookmarkable_id);
        else if ($type === 'event')
            Redis::sRem(config('cache.prefix').'User:' . $this->user_id . ':EventBookmarks', $this->bookmarkable_id);
    }

    public function collection()
    {
        return $this->belongsTo('App\Models\BookmarkCollection', 'collection_id', 'id');
    }

    public function bookmarkable()
    {
        return $this->morphTo();
    }
}
