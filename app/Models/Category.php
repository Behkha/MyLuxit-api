<?php

namespace App\Models;

use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redis;

class Category extends Model
{
    const itemPerPage = 15;
    const indexPagesCount = 25;
    const CachePagePeriod = 10;
    const CacheIndexPeriod = 15;
    const CacheVisitsPeriod = 60;
    const CacheRatingPeriod = 60;

    protected $guarded = [];
    protected $casts = [
        'tags' => 'array',
        'event_filters' => 'array',
        'place_filters' => 'array'
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::deleting(function ($category) {
        });

        self::created(function ($category) {
            $category->reindexAll();
        });

        self::updated(function ($category) {
            $category->reindexAll();
        });
    }

    public static function refreshCategories()
    {
        foreach (Category::get() as $category) {
            $place_filters = [
                'tags' => [],
                'types' => []
            ];
            $event_filters = [
                'tags' => [],
                'types' => []
            ];
            $tags = [];

            if (is_array($category->event_filters)) {
                if (in_array('tags', array_keys($category->event_filters)) && is_array($category->event_filters['tags'])) {
                    foreach ($category->event_filters['tags'] as $tagId) {
                        $tag = Tag::find($tagId);
                        if ($tag && !in_array($tagId, $event_filters['tags'])) {
                            array_push($event_filters['tags'], $tagId);
                        }
                    }
                }

                if (in_array('types', array_keys($category->event_filters)) && is_array($category->event_filters['types'])) {
                    foreach ($category->event_filters['types'] as $typeId) {
                        $type = EventType::find($typeId);
                        if ($type && !in_array($typeId, $event_filters['types'])) {
                            array_push($event_filters['types'], $typeId);
                        }
                    }
                }
            }

            if (is_array($category->place_filters)) {
                if (in_array('tags', array_keys($category->place_filters)) && is_array($category->place_filters['tags'])) {
                    foreach ($category->place_filters['tags'] as $tagId) {
                        $tag = Tag::find($tagId);
                        if ($tag && !in_array($tagId, $place_filters['tags'])) {
                            array_push($place_filters['tags'], $tagId);
                        }
                    }
                }
                if (in_array('types', array_keys($category->place_filters)) && is_array($category->place_filters['types'])) {
                    foreach ($category->place_filters['types'] as $typeId) {
                        $type = PlaceType::find($typeId);
                        if ($type && !in_array($typeId, $place_filters['types'])) {
                            array_push($place_filters['types'], $typeId);
                        }
                    }
                }
            }

            if (is_array($category->tags)) {
                foreach ($category->tags as $tagId) {
                    $tag = Tag::find($tagId);
                    if ($tag && !in_array($tagId, $tags)) {
                        array_push($tags, $tagId);
                    }
                }
            }

            $category->update([
                'place_filters' => $place_filters,
                'event_filters' => $event_filters,
                'tags' => $tags,
            ]);
        }

    }

    public static function getWithItems(Request $request, $id, $page, $city_id = null)
    {
        $cacheTags = ['category', 'category:' . $id, 'category:' . $id . ':page'];
        if ($city_id !== null) {
            array_push($cacheTags, 'category:' . $id . ':city:' . $city_id . 'page');
        }


        $category = Category::with(['language'])->findOrFail($id);
        $items = $category->getPage($page, $city_id);
        $category->loadFilters();

        return [
            'category' => $category,
            'items' => $items
        ];

    }

    public function getPage($page, $city_id = null)
    {
        $items = [];
        if ($page > self::indexPagesCount)
            return $items;


        $indexItems = $this->getPageIndex($page, $city_id);
        foreach ($indexItems as $indexItem) {
            array_push($items, $this->getIndexedItemObject($indexItem));
        }

        return $items;
    }

    private function getPageIndex($page, $city_id = null)
    {

        if ($city_id !== null) {
            $indexItems = Cache::tags(['category', 'category:' . $this->id, 'category:' . $this->id . ':city:' . $city_id, 'category:' . $this->id . ':index',])
                ->get('Category:' . $this->id . ':Index:Page:' . $page, []);
        } else {
            $indexItems = Cache::tags(['category', 'category:' . $this->id, 'category:' . $this->id . ':index'])
                ->get('Category:' . $this->id . ':Index:Page:' . $page, []);
        }

        return $indexItems;
    }

    private function getIndexedItemObject($indexItem)
    {
        if ($indexItem['type'] === 'event') {
            $event = Event::getById($indexItem['id']);
            $event->object_type = 'event';
            return $event;
        } else if ($indexItem['type'] === 'place') {
            $place = Place::getById($indexItem['id']);
            $place->object_type = 'place';
            return $place;
        }
    }

    public function loadFilters()
    {
        $place_filters = [
            'tags' => [],
            'types' => []
        ];
        $event_filters = [
            'tags' => [],
            'types' => []
        ];

        $tags = [];

        if (!empty($this->event_filters['tags'])) {
            $event_tags = collect();
            foreach ($this->event_filters['tags'] as $tag_id) {
                if ($tag = Tag::find($tag_id))
                    $event_tags->push($tag->toArray());
            }
            $event_filters['tags'] = $event_tags;
        }

        if (!empty($this->place_filters['tags'])) {
            $place_tags = collect();
            foreach ($this->place_filters['tags'] as $tag_id) {
                if ($tag = Tag::find($tag_id))
                    $place_tags->push($tag->toArray());
            }
            $place_filters['tags'] = $place_tags;
        }

        if (!empty($this->event_filters['types'])) {
            $event_types = collect();
            foreach ($this->event_filters['types'] as $type_id) {
                if ($type = EventType::find($type_id))
                    $event_types->push($type->toArray());
            }
            $event_filters['types'] = $event_types;
        }

        if (!empty($this->place_filters['types'])) {
            $place_types = collect();
            foreach ($this->place_filters['types'] as $type_id) {
                if ($type = PlaceType::find($type_id))
                    $place_types->push($type->toArray());
            }
            $place_filters['types'] = $place_types;
        }

        if (!empty($this->tags)) {
            $tag_collection = collect();
            foreach ($this->tags as $tag_id) {
                if ($tag = Tag::find($tag_id))
                    $tag_collection->push($tag->toArray());
            }
            $tags = $tag_collection;
        }

        if (empty($event_filters['tags']) && empty($event_filters['types'])) {
            $this->event_filters_objects = null;
        } else {
            $this->event_filters_objects = $event_filters;
        }

        if (empty($place_filters['tags']) && empty($place_filters['types'])) {
            $this->place_filters_objects = null;
        } else {
            $this->place_filters_objects = $place_filters;
        }

        $this->tags_objects = $tags;
    }

    public static function indexRelatedCategoriesTo($object, $objectTags = null)
    {
        $objectType = null;
        if ($object instanceof Event)
            $objectType = 'event';
        else if ($object instanceof Place)
            $objectType = 'place';

        $categories = Category::whereNotNull('position')->whereNotNull($objectType . '_filters')->get();

        foreach ($categories as $category) {
            $categoryHasType = $category->hasType($object->type_id, $objectType);
            $categoryHasTag = $category->hasTag($objectTags, $objectType);

            if ($categoryHasType && is_null($categoryHasTag)) {
                $category->reindexAll();
            } else if ($categoryHasType && $categoryHasTag) {
                $category->reindexAll();
            } else if (is_null($categoryHasType) && $categoryHasTag) {
                $category->reindexAll();
            }
        }

    }

    public static function deleteCategoriesIndexCache()
    {
    }

    public static function storeVisits()
    {
        $category_keys = Redis::keys(config('cache.prefix').'laravel:Category:*:TemporaryVisits');

        foreach ($category_keys as $key) {
            $visits = Redis::smembers($key);
            $category_id = explode(':', $key)[2];

            foreach ($visits as $visit) {
                $user_id = explode(':', $visit)[1];

                if (!$user_id) {
                    $user_id = null;
                }

                Visit::create([
                    'visitable_type' => 'category',
                    'visitable_id' => $category_id,
                    'user_id' => $user_id
                ]);
            }

            Redis::del($key);
        }
    }

    public static function deleteDailyVisitsCache()
    {
        $keys = Redis::keys(config('cache.prefix').'laravel:Category:*:DailyVisits');
        foreach ($keys as $key) {
            Redis::del($key);
        }
    }

    public static function flushIndex()
    {

    }

    public function language()
    {
        return $this->belongsTo('App\Models\Language');
    }

    public function reindexAll()
    {
        Cache::tags(['category:' . $this->id])->flush();
        foreach (City::whereHas('citiables')->get() as $city) {
            $this->reindex($city->id);
        }
        $this->reindex();
    }

    public function reindex($city_id = null)
    {
        $this->index($city_id);
    }

    public function index($city_id = null)
    {
        $events = $this->getFilteredEvents($city_id);
        $places = $this->getFilteredPlaces($city_id);

        $indexItems = [];

        if ($events && $places && $events->count() && $places->count()) {
            $indexItems = $this->mergeCategoryItems($events, $places);
        } else {
            if ($places && $places->count()) {
                foreach ($places as $place)
                    array_push($indexItems, [
                        'id' => $place->id,
                        'type' => 'place'
                    ]);
            }
            if ($events && $events->count()) {
                foreach ($events as $event)
                    array_push($indexItems, [
                        'id' => $event->id,
                        'type' => 'event'
                    ]);
            }
        }


        $this->cacheCategoryIndexItems($indexItems, $city_id);
    }

    private function getFilteredEvents($city_id = null)
    {
        $eventFilters = $this->event_filters;
        foreach ($this->subcategories()->get() as $subcategory) {
            array_merge($eventFilters, $subcategory->event_filters);
        }

        $tags = $this->tags;
        foreach ($this->subcategories()->get() as $subcategory) {
            array_merge($tags, $subcategory->tags);
        }

        $events = null;
        if ($eventFilters || $tags) {
            $query = null;
            if (!empty($eventFilters['types']))
                $query = Event::whereIn('type_id', $eventFilters['types']);
            if (!empty($eventFilters['tags']) || !empty($tags)) {
                $filterTags = !empty($eventFilters['tags']) ? $eventFilters['tags'] : [];
                if (!empty($tags)) {
                    $filterTags = array_merge($filterTags, $tags);
                }
                $query = $query ? $query->orWhereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('tag_id', $filterTags);
                }) : Event::whereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('tag_id', $filterTags);
                });
            }

            if ($query === null)
                return [];
            if ($city_id !== null) {
                $query->whereHas('cities', function ($q) use ($city_id) {
                    $q->where('city_id', $city_id);
                });
            }
            $events = $query->limit(self::itemPerPage * self::indexPagesCount)->orderByDesc('created_at')->get(['id', 'created_at']);
            return $events;
        }
    }

    public function subcategories()
    {
        return $this->hasMany('App\Models\Category', 'parent_id');
    }

    private function getFilteredPlaces($city_id = null)
    {
        $placeFilters = $this->place_filters;
        foreach ($this->subcategories()->get() as $subcategory) {
            array_merge($placeFilters, $subcategory->place_filters);
        }

        $tags = $this->tags;
        foreach ($this->subcategories()->get() as $subcategory) {
            array_merge($tags, $subcategory->tags);
        }

        $places = null;

        if ($placeFilters || $tags) {
            $query = null;
            if (!empty($placeFilters['types']))
                $query = $query ? $query->whereIn('type_id', $placeFilters['types']) : Place::whereIn('type_id', $placeFilters['types']);
            if (!empty($placeFilters['tags']) || !empty($tags)) {
                $filterTags = !empty($placeFilters['tags']) ? $placeFilters['tags'] : [];
                if (!empty($tags)) {
                    $filterTags = array_merge($filterTags, $tags);
                }
                $query = $query ? $query->orWhereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                }) : Place::whereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                });
            }
            if ($query === null)
                return [];

            if ($city_id !== null) {
                $query->whereHas('cities', function ($q) use ($city_id) {
                    $q->where('city_id', $city_id);
                });
            }
            $places = $query->limit(self::itemPerPage * self::indexPagesCount)->orderByDesc('created_at')->get(['id', 'created_at']);
        }
        return $places;
    }

    private function mergeCategoryItems($events, $places)
    {
        $items = [];
        $placeCounter = 0;
        $eventCounter = 0;
        $placeItemsCount = count($places);
        $eventItemsCount = count($events);

        $i = min(self::itemPerPage * self::indexPagesCount, $eventItemsCount + $placeItemsCount);
        for ($i; $i >= 1; $i--) {
            if ($events[$eventCounter]->created_at->gt($places[$placeCounter]->created_at)) {
                array_push($items, ['id' => $events[$eventCounter]->id, 'type' => 'event']);
                $eventCounter++;
            } else {
                array_push($items, ['id' => $places[$placeCounter]->id, 'type' => 'place']);
                $placeCounter++;
            }
            if ($placeItemsCount <= $placeCounter || $eventItemsCount <= $eventCounter) {
                $i--;
                break;
            }
        }

        if ($i != 0) {
            if ($placeCounter < $placeItemsCount)
                for ($i; $i >= 1; $i--) {
                    array_push($items, ['id' => $places[$placeCounter]->id, 'type' => 'place']);
                    $placeCounter++;
                }

            if ($eventCounter < $eventItemsCount)
                for ($i; $i >= 1; $i--) {
                    array_push($items, ['id' => $events[$eventCounter]->id, 'type' => 'event']);
                    $eventCounter++;
                }
        }

        return $items;
    }

    private function cacheCategoryIndexItems($items, $city_id = null)
    {
        $itemsCount = count($items);
        for ($i = 0; $i < self::indexPagesCount; $i++) {
            if ($itemsCount <= $i * self::itemPerPage) {
                break;
            }
            $itemsPerPage = array_slice($items, $i * self::itemPerPage, min(self::itemPerPage, $itemsCount - ($i * self::itemPerPage)));

            if ($city_id !== null) {
                Cache::tags(['category', 'category:' . $this->id, 'category:' . $this->id . ':city:' . $city_id, 'category:' . $this->id . ':index',])
                    ->forever('Category:' . $this->id . ':Index:Page:' . ($i + 1), $itemsPerPage);
            } else {
                Cache::tags(['category', 'category:' . $this->id, 'category:' . $this->id . ':index'])->forever('Category:' . $this->id . ':Index:Page:' . ($i + 1), $itemsPerPage);
            }
        }
    }

    public function incrementVisits(Request $request)
    {
        $result = Redis::sadd(config('cache.prefix').'laravel:Category:' . $this->id . ':TemporaryVisits', 'user_id:' . Auth::id());

        $this->cacheDailyVisitsIfNotCached();

        if ($result > 0) {
            Redis::hincrby(config('cache.prefix').'laravel:Category:' . $this->id . ':DailyVisits', date('Y-m-d'), 1);
        }
    }

    private function cacheDailyVisitsIfNotCached()
    {
        if (!Redis::exists(config('cache.prefix').'laravel:Category:' . $this->id . ':DailyVisits'))
            $this->cacheDailyVisits();
    }

    private function cacheDailyVisits()
    {
        $visits = Visit::where('visitable_id', '=', $this->id)
            ->where('visitable_type', '=', 'category')
            ->selectRaw('COUNT(*) as count, CAST(created_at AS DATE) as date')
            ->groupBy(DB::raw('CAST(created_at as DATE)'))
            ->get();

        foreach ($visits as $visit) {
            Redis::hset(config('cache.prefix').'laravel:Category:' . $this->id . ':DailyVisits', $visit->date, $visit->count);
        }
    }

    public function getVisitsFromCache()
    {
        $this->cacheDailyVisitsIfNotCached();

        return Redis::hgetall(config('cache.prefix').'laravel:Category:' . $this->id . ':DailyVisits');

    }

    public function getVisitsCountFromCache()
    {
        $this->cacheDailyVisitsIfNotCached();
        $values = Redis::hvals('laravel:Category:' . $this->id . ':DailyVisits');
        $count = 0;


        foreach ($values as $value)
            $count += $value;

        return $count;
    }

    public function hasType($id, $type)
    {
        if (empty($this[$type . '_filters']['types']))
            return null;
        else
            return in_array($id, $this[$type . '_filters']['types']);
    }

    public function hasTag($objectTags, $type)
    {
        if (empty($this->tags) && empty($this[$type . '_filters']['tags']))
            return null;

        $tags = !empty($this->tags) ? $this->tags : [];
        $tags = !empty($this[$type . '_filters']['tags']) ? array_unique(array_merge($tags, $this[$type . '_filters']['tags'])) : $tags;
        $tagsCount = count($tags);
        $tagCollection = collect($tags);
        $tagDifferCollection = $tagCollection->diff($objectTags);
        return $tagsCount !== $tagDifferCollection->count();
    }

    public function getAverageRatingFromCache()
    {
        $events = $this->getAllFilteredEvents();

        $event_ratings = Rating::whereIn('ratable_id', $events)->avg('rate');

        if (!is_numeric($event_ratings)) {
            $event_ratings = 0;
        }

        $places = $this->getAllFilteredPlaces();
        $place_ratings = Rating::whereIn('ratable_id', $places)->avg('rate');
        if (!is_numeric($place_ratings)) {
            $place_ratings = 0;
        }

        return [
            'place_ratings' => $place_ratings,
            'event_ratings' => $event_ratings,
            'total_ratings' => ($event_ratings + $place_ratings) / 2
        ];
    }

    public function getAllFilteredEvents()
    {
        $eventFilters = $this->event_filters;
        $tags = $this->tags;
        $events = null;
        if ($eventFilters) {
            $query = null;
            if (!empty($eventFilters['types']))
                $query = Event::whereIn('type_id', $eventFilters['types']);
            if (!empty($eventFilters['tags']) || !empty($tags)) {
                $filterTags = !empty($eventFilters['tags']) ? $eventFilters['tags'] : [];
                if (!empty($tags))
                    $filterTags = array_merge($filterTags, $tags);
                $query = $query ? $query->whereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                }) : Event::whereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                });
            }

            if ($query !== null) {
                $events = $query->pluck('id')->toArray();
            }
        }

        return $events ?: [];
    }

    public function getAllFilteredPlaces()
    {
        $placeFilters = $this->place_filters;
        $tags = $this->tags;
        $places = null;

        if ($placeFilters) {
            $query = null;
            if (!empty($placeFilters['types']))
                $query = $query ? $query->whereIn('type_id', $placeFilters['types']) : Place::whereIn('type_id', $placeFilters['types']);

            if (!empty($placeFilters['tags']) || !empty($tags)) {
                $filterTags = !empty($placeFilters['tags']) ? $placeFilters['tags'] : [];
                if (!empty($tags))
                    $filterTags = array_merge($filterTags, $tags);
                $query = $query ? $query->orWhereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                }) : Place::whereHas('tags', function ($query) use ($filterTags) {
                    $query->whereIn('id', $filterTags);
                });
            }
            if ($query !== null) {
                $places = $query->pluck('id')->toArray();
            }
        }
        return $places ?: [];
    }

    public function scopeTopLevel($query)
    {
        $query->where('depth', 0);
    }

    public function scopeLanguage($query, $langauge_id)
    {
        return $query->where('language_id', $langauge_id);
    }

    private function getDirectVisits()
    {
        return $this->visits()
            ->selectRaw('COUNT(id) as views, CAST(created_at AS DATE) AS date')
            ->groupBy(DB::raw('CAST(created_at as DATE)'))
            ->get();
    }

    public function visits()
    {
        return $this->morphMany('App\Models\Visit', 'visitable');
    }

    private function getEventVisitsFromCache()
    {
        $events = $this->getAllFilteredEvents();

        $event_visits = Visit::where('visitable_type', '=', 'event')
            ->whereIn('visitable_id', $events)
            ->selectRaw('COUNT(id) as views, CAST(created_at AS DATE) AS date')
            ->groupBy(DB::raw('CAST(created_at as DATE)'))
            ->get();

        return $event_visits;

    }

    private function getPlaceVisitsFromCache()
    {
        $places = $this->getAllFilteredPlaces();

        $place_visits = Visit::where('visitable_type', '=', 'place')
            ->whereIn('visitable_id', $places)
            ->selectRaw('COUNT(id) AS views, CAST(created_at AS DATE) AS date')
            ->groupBy(DB::raw('CAST(created_at as DATE)'))
            ->get();

        return $place_visits;
    }
}
